<?php
/**
 * @file
 * Provide the Trackback protocol to the Vinculum module.
 * Note that many sites which use trackback do not implement the autodiscovery
 * mechanisms, which means it's important to provide a manual interface.
 */


// The trackback request was received and the trackback has been added.
define ('VINCULUM_TRACKBACK_ADDED', 201);

// The trackback request was received but may be subject to moderation.
define ('VINCULUM_TRACKBACK_ACCEPTED', 202);

// The trackback request failed.
define ('VINCULUM_TRACKBACK_FAILED', 400);


/**
 * Implements hook_vinculum_handler().
 */
function vinculum_trackback_vinculum_handler() {
  return array(
    'protocol' => t('Trackback auto-discovery'),
  );
}

/**
 * Implements hook_vinculum_send().
 *
 * Attempt to send a trackback.  The pingback protocol uses a simple static
 * schema: only the origin and target URLs are used.
 *
 * @param String $target
 * The remote URL.
 * @param String $source
 * The URL of the local node.
 * @param Object $node
 * The drupal node.
 *
 * @ingroup vinculum
 */
function vinculum_trackback_vinculum_send($target, $source, $node) {
  $params = array(
    'title'     => $node->title,
    'blog_name' => variable_get('site_name', 'Drupal'),
    // @TODO: extract excerpt from node.
  );
  return VinculumTrackbackHandler::send($target, $source, $params);
}

/**
 * Implements hook_node_view().
 *
 * Add trackback auto-discovery RDF text to nodes which allow refbacks.
 */
function vinculum_trackback_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && vinculum_node_allows_vinculum($node, 'receive')) {

    // Get the canonical URL to this node.
    $localURL = url("node/{$node->nid}", array('absolute' => TRUE));

    // Get the Trackback endpoint for this specific node.
    $endpointURL = url("node/{$node->nid}/trackback", array('absolute' => TRUE));

    // Build the RDF metadata.
    $rdf_text = VinculumTrackbackHandler::buildTrackbackRDF($localURL, $endpointURL, $node->title);

    // Add the RDF meta-data to the node.
    $node->content['trackback'] = array(
      '#markup' => $rdf_text,
    );
  }
}

/**
 * Implements hook_menu().
 */
function vinculum_trackback_menu() {
  // XML endpoint for trackback registration for nodes. Not for humans!
  $items['node/%node/trackback'] = array(
    'title' => 'Trackbacks',
    'delivery callback' => 'vinculum_trackback__deliver_xml',
    'page callback' => 'vinculum_trackback_receive',
    'page arguments' => array(1),

    // This URL is accessible according to the node's visibility to ANONYMOUS
    // users and whether 'Receive vinculums' is allowed on the node.
    'access callback' => 'vinculum_node_allows_vinculum',
    'access arguments' => array(1, 'receive'),

    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Register the receipt of a trackback.
 *
 * @return String|Int
 * - VINCULUM_TRACKBACK_ADDED
 *   The trackback was received and has been added.
 * - VINCULUM_TRACKBACK_ACCEPTED
 *   The trackback was received and has been queued for moderation.
 * - VINCULUM_TRACKBACK_FAILED
 *   The trackback was not accepted (no error message provided).
 * - String
 *   An error message.
 */
function vinculum_trackback_receive($node) {
  // Trackback requests must be POST requests, and provide a URL parameter.
  if ($_SERVER['REQUEST_METHOD'] != 'POST' || empty($_REQUEST['url'])) {
    return _vinculum_trackback_receive_error();
  }
  
  // Build the Vinculum entity.
  $params = array(
    'handler'  => 'vinculum_trackback',
    'nid'      => $node->nid,
  );
  // Add the request parameters provided.
  _vinculum_trackback__add_allowed_params($params);

  // Attempt to create a Vinculum entity.
  $vinculum = new VinculumReceived($params);
  if ($result = $vinculum->save()) {
    // Successful: provide a meaningful response.
    if ($result == SAVED_NEW || $result == SAVED_UPDATED) {
      return VINCULUM_TRACKBACK_ACCEPTED;
    }
  }
}

/**
 * Delivery callback to deliver the XML response to a trackback request.
 *
 * @see drupal_deliver_html_page()
 *
 * @param String|Int $response
 * - VINCULUM_TRACKBACK_ADDED
 *   The trackback was received and has been added.
 * - VINCULUM_TRACKBACK_ACCEPTED
 *   The trackback was received and has been queued for moderation.
 * - VINCULUM_TRACKBACK_FAILED
 *   The trackback was not accepted (no error message provided).
 * - String
 *   An error message.
 */
function vinculum_trackback__deliver_xml($page_callback_result) {
  // All responses using this handler are are XML.
  drupal_add_http_header('Content-Type', 'text/xml');

  switch ($page_callback_result) {
    case VINCULUM_TRACKBACK_ADDED:
      drupal_add_http_header('Status', '201 Created');
      $xml = VinculumTrackbackHandler::getResponseSuccess();

    case VINCULUM_TRACKBACK_ACCEPTED:
      drupal_add_http_header('Status', '202 Accepted');
      $xml = VinculumTrackbackHandler::getResponseSuccess();
      break;

    case VINCULUM_TRACKBACK_FAILED:
      drupal_add_http_header('Status', '400 Bad Request');
      $xml = VinculumTrackbackHandler::getResponseFailed();
      break;

    case '':
      drupal_add_http_header('Status', '400 Bad Request');
      $xml = VinculumTrackbackHandler::getResponseFailed(t('An unknown error occurred'));
      break;

    default:
      drupal_add_http_header('Status', '400 Bad Request');
      $xml = VinculumTrackbackHandler::getResponseFailed($response);
      break;
  }

  echo $xml;

  // Perform end-of-request tasks.
  drupal_page_footer();
}

/**********************************************************
 * Public API functions.
 *********************************************************/
// 
// /**
//  * Save a new trackback (record a third-party site linking to the Drupal site).
//  *
//  * @param Object $trackback
//  */
// function vinculum_trackback_save_trackback($trackback) {
//   // Build a vinculum object.
//   $vinculum = new vinculum($trackback->nid, $trackback->url, 'vinculum_trackback');
//   $vinculum->data = $trackback;
// 
//   // The vinculum_receive_validate() function handles delegated validation.
//   $result = vinculum_receive_validate($vinculum);
//   if ($result != VINCULUM_VALIDATES) {
//     return $result;
//   }
//   else {
//     // Mark the record as valid, to save the overhead of re-validation.
//     $vinculum->isValid();
//   }
// 
//   // Write an entry in the trackback tracker table.
//   db_merge('vinculum_trackback_received')
//     ->key(array(
//       'nid' => $trackback->nid,
//       'url' => $trackback->url,
//       ))
//     ->fields(array(
//       'blog_name' => $trackback->blog_name,
//       'title'     => $trackback->title,
//       'excerpt'   => $trackback->excerpt,
//       'origin_ip' => ip_address(),
//       'timestamp' => time(),
//     ))
//     ->execute();
// 
//   // Call the API to register receipt of the vinculum.
//   vinculum_receive($vinculum);
// }
// 
// 
// /**
//  * Send a trackback request (notify a third-party site of a link).
//  *
//  * @param String $endpoint_url
//  *   The URL of the remote Trackback endpoint.
//  * @param Array $params
//  * - url       The URL of the local node (REQUIRED).
//  * - title     The title of the local node (optional).
//  * - excerpt   Excerpt from the local node (optional).
//  * - blog_name Name of the local site (optional; defaults to site-name).
//  *
//  * @return Boolean
//  * TRUE if the remote site reported success.
//  * FALSE if the remote site reported failure, or any other error occurred (e.g.
//  *   network error preventing the site from being reached).
//  */
// function vinculum_trackback_send_trackback($endpoint_url, $params) {
//   if (!is_array($params) || empty ($params['url'])) {
//     throw new Exception ("The vinculum_trackback_send_trackback() function requires that \$params['url'] is provided");
//   }
//   // Data to send in the trackback.
//   $params += array(
//     'blog_name' => variable_get('site_name', 'Drupal'),
//   );
//   $params = http_build_query($params);
// 
//   $options = array(
//     // The Trackback protocol supports requires POST.
//     'method' => 'POST',
//     'headers' => array(
//       'User-Agent' => VINCULUM_TRACKBACK_UA,
//       'Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8',
//     ),
//     // Add the data to send in the Trackback.
//     'data' => $params,
//   );
//   $result = drupal_http_request($endpoint_url, $options);
// 
//   if ($result->data) {
//     list($error, $message) = _vinculum_trackback_parse_response($result->data);
// 
//     // Log the error.
//     if (is_null($error)) {
//       // The response could not be parsed.
//       $params = array(
//         '%url' => $endpoint_url,
//         '!verbose_output' => filter_xss(str_replace("\n", "<br />\n", htmlentities($result->data))),
//       );
//       watchdog('Trackback', 'Trackback response for endpoint %url could not be parsed as XML.<br />!verbose_output', $params, WATCHDOG_DEBUG);
//     }
//     elseif ($error && $message) {
//       $params = array(
//         '%url' => $endpoint_url,
//         '!verbose_output' => filter_xss(str_replace("\n", "<br />\n", htmlentities($message))),
//       );
//       watchdog('Trackback', 'Trackback failed for endpoint %url with the message:<br />!verbose_output', $params, WATCHDOG_DEBUG);
//     }
//     elseif ($error) {
//       $params = array(
//         '%url' => $endpoint_url,
//       );
//       watchdog('Trackback', 'Trackback failed for endpoint %url. No error message was provided.', $params, WATCHDOG_DEBUG);
//     }
// 
//     return ($error === FALSE);
//   }
// }
// 
// /**********************************************************
//  * Private helper functions.
//  *********************************************************/
// 
// /**
//  * Parse the response from a trackback endpoint, and report if the response is
//  * an error (and any message, if provided).
//  *
//  * @param String $html
//  *  The response provided by the Trackback endpoint.
//  *
//  * @return Array(
//  *   0 => Error state (boolean|NULL),
//  *   1 => Message (if set),
//  * );
//  */
// function _vinculum_trackback_parse_response($html) {
//   // If the html can't be parsed as XML, return error response NULL.
//   if (!$xml = @simplexml_load_string($html)) {
//     return array(NULL, '');
//   }
// 
//   // Check for the <error> response.
//   $error_response = $xml->xpath('//response/error/text()');
//   if (empty($error_response)) {
//     return array(NULL, '');
//   }
//   elseif ($error_response[0] == 1) {
//     // Check for an error message.
//     $error_message = $xml->xpath('//response/message/text()');
//     if (count($error_message)) {
//       return array(TRUE, $error_message[0]);
//     }
//     return array(TRUE, '');
//   }
//   elseif ($error_response[0] == 0) {
//     // Error response 0 means OK
//     return array(FALSE, '');
//   }
//   else {
//     // There's an <error> response, but it doesn't conform to the standard
//     // of being 0 or 1.
//     return array(NULL, '');
//   }
// }
// 
// /**
//  * Get the local Trackback API endpoint URL for a local node.
//  *
//  * The trackback endpoint for each node is at:
//  * node/%node/trackback
//  *
//  * @param Object $node
//  *   A drupal node.
//  *
//  * @return String
//  * The URL of the Trackback endpoint.
//  */
// function _vinculum_get_trackback_endpoint($node) {
//   return url("node/{$node->nid}/trackback", array('absolute' => TRUE));
// }
// 
// /**
//  * Add the RDF meta-data which allows third-party sites to auto-discover
//  * Trackback support.
//  *
//  * @TODO: investigate integrating this with the RDF module.
//  */
// function _vinculum_add_trackback_autodiscovery_metadata($node) {
// 
//   // Get the canonical URL to this node.
//   $url = url("node/{$node->nid}", array('absolute' => TRUE));
// 
//   // Get the Trackback endpoint for this specific node.
//   $tb_url = _vinculum_get_trackback_endpoint($node);
// 
//   $rdf_text = "\n<!--\n";
//   $rdf_text .= '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">' . "\n";
//   $rdf_text .= "\t" . '<rdf:Description';
//   $rdf_text .= ' rdf:about="' . $url . '"';
//   $rdf_text .= ' dc:identifier="' . $url . '"';
//   $rdf_text .= ' dc:title="' . strtr(check_plain($node->title), array('--' => '&mdash;')) . '"';
//   $rdf_text .= ' trackback:ping="' . $tb_url . '" />' . "\n";
//   $rdf_text .= '</rdf:RDF>';
//   $rdf_text .= "\n-->\n";
// 
//   // Add the RDF meta-data to the node.
//   $node->content['trackback'] = array(
//     '#markup' => $rdf_text,
//   );
// }

/**
 * Handle a malformed trackback request (such as missing URL).
 *
 * @return String
 * An error message.
 */
function _vinculum_trackback_receive_error() {
  // Log the failure.
  if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $log_message = t('The remote server did not provide the URL of the trackback.');
  }
  else if (isset($_REQUEST['url'])) {
    $log_message = t('The request method was %method but should be POST.', array('%method' => $_SERVER['REQUEST_METHOD']));
  }
  else {
    $log_message = t('The remote server did not provide the URL of the trackback, and the request method was %method but should be POST.', array('%method' => $_SERVER['REQUEST_METHOD']));
  }
  watchdog('Trackback', 'Received an invalid trackback request.<br />@log_message', array('@log_message' => $log_message), WATCHDOG_DEBUG);


  // Provide an error message for invalid trackback requests.
  $error_message = t('Malformed Trackback request: requests must use POST and provide a url.  See http://www.sixapart.com/pronet/docs/trackback_spec#Sending_a_TrackBack_Ping');
  return $error_message;
}

/**
 * Add data from the request made by the trackback's request.
 */
function _vinculum_trackback__add_allowed_params(&$params) {
  // Request parameters permitted by the trackback protocol.
  // The "blog_name" parameter is currently ignored.
  $allowed_remote_data = array(
    'url',
    'title',
    'excerpt',
  );
  foreach ($allowed_remote_data as $variable) {
    if (isset($_REQUEST[$variable])) {
      $params[$variable] = $_REQUEST[$variable];
    }
  }
}
