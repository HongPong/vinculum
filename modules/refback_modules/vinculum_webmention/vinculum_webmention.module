<?php
/**
 * @file
 * Provide the Webmention protocol to the Vinculum module.
 *
 * @see Specification document: http://archive.cweiske.de/trackback/trackback-1.2.html
 */

// Return a HTTP 201 (Created) response when a 'webmention' is successfully added.
define('VINCULUM_WEBMENTION_ACCEPTED', 201);

/**
 * Implements hook_vinculum_handler().
 */
function vinculum_webmention_vinculum_handler() {
  return array(
    'protocol' => t('Webmention'),
  );
}

/**
 * Implements hook_vinculum_send().
 * @param string $target
 *   Absolute URL of the remote article.
 * @param string $source
 *   Absolute URL of the local page.
 * @param object $node
 */
function vinculum_webmention_vinculum_send($target, $source, $node) {
  return VinculumWebmentionHandler::send($source, $target);
}

/**
 * Implements hook_menu().
 */
function vinculum_webmention_menu() {
  // Endpoint for webmention registration for nodes. Not for humans!
  $items['node/%node/webmention'] = array(
    'title' => 'Webmentions',
    'page callback' => 'vinculum_webmention_receive',
    'page arguments' => array(1),

    // This URL is accessible according to the node's visibility to ANONYMOUS
    // users and whether 'Receive vinculums' is allowed on the node.
    'access callback' => 'vinculum_node_allows_vinculum',
    'access arguments' => array(1, 'receive'),

    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_view().
 *
 * Adds a HTTP header and a <link> tag which give the webmention server endpoint
 * URL.
 */
function vinculum_webmention_node_view($node, $view_mode, $langcode) {
  // @TODO: configurable view-modes?
  if ($view_mode == 'full' && vinculum_node_allows_vinculum($node, 'receive')) {
    $webmention_endpoint = url('node/' . $node->nid . '/webmention', array('absolute' => TRUE));

    // Add both a HTTP header and a <link> tag.
    drupal_add_http_header('Link', '<' . $webmention_endpoint . '>; rel="webmention"');
    drupal_add_html_head_link(array('rel' => 'webmention', 'href' => $webmention_endpoint));
  }
}

/**
 * Webmention endpoint; Menu callback.
 */
function vinculum_webmention_receive() {
  // All the responses used here are plain-text.
  drupal_add_http_header('Content-Type', 'text/plain; utf-8');

  // Webmention provides both the source and the target URLs as POST data.
  $source = (isset($_POST['source'])) ? $_POST['source'] : '';
  $target = (isset($_POST['target'])) ? $_POST['target'] : '';

  // Require both a source and a target.
  if (!($source && $target)) {
    drupal_add_http_header('Status', '400 Bad Request');

    // Provide HTTP headers and a plain text response to help developers debug
    // their errors.
    if (empty($source)) {
      drupal_add_http_header('X-WEBMENTION-ERROR', 'Missing source parameter.', TRUE);
      echo "Missing source parameter.\n";
    }
    if (empty($target)) {
      drupal_add_http_header('X-WEBMENTION-ERROR', 'Missing target parameter.', TRUE);
      echo "Missing target parameter.\n";
    }

    // Return NULL to suppress the usual Drupal web-page wrapper.
    return NULL;
  }

  // 1. The receiver SHOULD check that target is a valid resource belonging to
  // it and that it accepts webmentions.
  if ($nid = vinculum_webmention_validate_resource_exists($target)) {
    $node = node_load($nid);
  }
  if (empty($node)) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_add_http_header('X-WEBMENTION-ERROR', 'Invalid target.', TRUE);
    echo "Invalid target parameter.\n";
    return NULL;
  }

  if (!vinculum_webmention_validate_resource_accepts_webmentions($node)) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_add_http_header('X-WEBMENTION-ERROR', 'Invalid target.', TRUE);
    echo "Invalid target parameter.\n";
    return NULL;
  }

  // 2. The receiver SHOULD perform a HTTP GET request on source to confirm that
  // it actually links to target (note that the receiver will need to check the
  // Content-Type of the entity returned by source to make sure it is a textual
  // response).
  if (!vinculum_webmention_validate_source_exists($source)) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_add_http_header('X-WEBMENTION-ERROR', 'Invalid source.', TRUE);
    echo "Invalid source: does not contain a reference to the target parameter.\n";
    return NULL;
  }

  if (!vinculum_webmention_validate_source_contains_target($source, $target)) {
    drupal_add_http_header('Status', '400 Bad Request');
    drupal_add_http_header('X-WEBMENTION-ERROR', 'Invalid source.', TRUE);
    echo "The source does not reference the target.\n";
    return NULL;
  }

  // If this code path is reached, the request is valid.
  // Build the Vinculum entity.
  $params = array(
    'handler'  => 'vinculum_webmention',
    'nid'      => $node->nid,
    'url'      => $source,
  );

  // Attempt to create a Vinculum entity.
  $vinculum = new VinculumReceived($params);

  if ($result = $vinculum->save()) {
    watchdog('Webmention', 'Webmention saved ok %result from %source to %target ',
      array('%source' => $source, '%target' => $target, '%result' => $result), WATCHDOG_INFO);

    drupal_add_http_header('Status', '201 Created');
    echo "Webmention added.\n";
    return NULL;
  }
  else {
    // Report a server error.
    watchdog('Webmention', 'Error saving webmention from %source to %target with result= %result',
      array('%source' => $source, '%target' => $target, '%result' => $result), WATCHDOG_ERROR);

    drupal_add_http_header('Status', '500 Server error');
    echo "An error prevented the webmention from being saved.\n";
    return NULL;
  }

  // Perform end-of-request tasks.
  drupal_page_footer();
}

/**
 * Validate if a local resource exists.
 *
 * @param string $target
 *   The local target URL
 *
 * @return int|bool
 *   Return a node id or FALSE
 */
function vinculum_webmention_validate_resource_exists($target) {
  if (!$target) {
    return FALSE;
  }
  $parts = parse_url($target);

  // Non clean URL.
  if (isset($parts['path']) && $parts['path'] === '/index.php' &&
      isset($parts['query'])) {

    $query = substr($parts['query'], 2);
    $args = explode('/', $query);
    if (isset($args[0]) && $args[0] === 'node' &&
      is_numeric($args[1]) && !isset($args[2])) {

        $nid = (int) $args[1];
        $node = node_load($nid);
        return $node->nid;
    }
  }
  // Clean URL.
  elseif (isset($parts['path']) && substr($parts['path'], 0, 5) === '/node') {
    $query = substr($parts['path'], 1);
    $args = explode('/', $query);
    if (isset($args[0]) && $args[0] === 'node' &&
      is_numeric($args[1]) && !isset($args[2])) {

      $nid = (int) $args[1];
      $node = node_load($nid);
      return $node->nid;
    }
  }
  // Path alias.
  elseif (isset($parts['path'])) {
    $alias = $parts['path'];
    if ($query = drupal_lookup_path('source', $alias)) {
      $args = explode('/', $query);
      if (isset($args[0]) && $args[0] === 'node' &&
        is_numeric($args[1]) && !isset($args[2])) {

        $nid = (int) $args[1];
        $node = node_load($nid);
        return $node->nid;
      }
    }
  }
  // No idea.
  return FALSE;
}

/**
 * Validate if a resource accepts Webmentions.
 *
 * @param $node
 *
 * @return bool
 */
function vinculum_webmention_validate_resource_accepts_webmentions($node) {
  if (!$node) {
    return FALSE;
  }
  return (bool) $node->vinculum_send;
}

/**
 * Validate if a source exists.
 *
 * @param $source
 *
 * @return bool
 */
function vinculum_webmention_validate_source_exists($source) {
  return VinculumWebmentionHandler::validateSourceExists($source);
}

/**
 * Validate if a source contains the target URL.
 *
 * @param $source
 *
 * @return bool
 */
function vinculum_webmention_validate_source_contains_target($source, $target) {
  return VinculumWebmentionHandler::validateSourceContainsTarget($source, $target);
}
