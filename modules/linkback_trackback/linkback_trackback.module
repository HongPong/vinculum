<?php
/**
 * @file
 * Provide the Trackback protocol to the Linkback module.
 */


/**
 * Implements hook_linkback_handler().
 */
function linkback_trackback_linkback_handler() {
  return array(
    'protocol' => t('Trackback'),
  );
}

/**
 * Implements hook_menu().
 */
function linkback_trackback_menu() {
  // END-POINT for trackback registration. Not for humans!
  $items['node/%node/trackback'] = array(
    'title' => 'Trackbacks',
    'page callback' => 'linkback_trackback_receive',
    'page arguments' => array(1),
    // This URL is accessible according to the node's visibility to ANONYMOUS
    // users and whether 'Receive linkbacks' is allowed on the node.
    'access callback' => 'linkback_node_allows_linkback',
    'access arguments' => array(1, 'receive'),
    'file' => 'linkback_trackback.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_node_view().
 *
 * The trackback protocol is handled by a helper function, which may be
 * replaced by rdf-integration at some point.
 */
function linkback_trackback_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && linkback_node_allows_linkback($node, 'receive')) {
    _linkback_add_trackback_receive($node);
  }
}


/**
 * Add the RDF which allows trackbacks to be tracked.
 *
 * @TODO: investigate integrating this with the RDF module.
 */
function _linkback_add_trackback_receive($node) {
  // Canonical URL to the node.
  $url = url("node/{$node->nid}", array('absolute' => TRUE));
  // Trackback end-point for this specific node.
  $tb_url = _linkback_get_trackback_endpoint($node);

  $rdf_text = "\n<!--\n";
  $rdf_text .= '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">' . "\n";
  $rdf_text .= "\t" . '<rdf:Description';
  $rdf_text .= ' rdf:about="' . $url . '"';
  $rdf_text .= ' dc:identifier="' . $url . '"';
  $rdf_text .= ' dc:title="' . strtr(check_plain($node->title), array('--' => '&mdash;')) . '"';
  $rdf_text .= ' trackback:ping="' . $tb_url . '" />' . "\n";
  $rdf_text .= '</rdf:RDF>';
  $rdf_text .= "\n-->\n";

  $node->content['trackback'] = array(
    '#markup' => $rdf_text,
  );
}


/**
 * The trackback endpoint for each node is at:
 * node/%node/trackback
 */
function _linkback_get_trackback_endpoint($node) {
  return url("node/{$node->nid}/trackback", array('absolute' => TRUE));
}

/**
 * Save a new trackback.
 *
 * @param Object $trackback
 */
function linkback_trackback_save_trackback($trackback) {
  // Build a linkback object.
  $linkback = new linkback($trackback->nid, $trackback->url, 'linkback_trackback');
  $linkback->data = $trackback;

  // The linkback_receive_validate() function handles delegated validation.
  $result = linkback_receive_validate($linkback);
  if ($result != LINKBACK_VALIDATES) {
    return $result;
  }
  else {
    // Mark the record as valid, to save the overhead of re-validation.
    $linkback->isValid();
  }

  // Write an entry in the trackback tracker table.
  db_merge('linkback_trackback_received')
    ->key(array(
      'nid' => $trackback->nid,
      'url' => $trackback->url,
      ))
    ->fields(array(
      'blog_name' => $trackback->blog_name,
      'title'     => $trackback->title,
      'excerpt'   => $trackback->excerpt,
      'origin_ip' => ip_address(),
      'timestamp' => time(),
    ))
    ->execute();

  // Call the API to register receipt of the linkback.
  linkback_receive($linkback);
}
